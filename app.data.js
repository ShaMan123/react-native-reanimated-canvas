module.exports = [
  {"filepath":"pages\\1.index.md","title":"Reanimated Canvas","description":"","link":"index","data":"# React Native Reanimated Canvas\r\n\r\n---\r\n\r\nA canvas component designed especially for responsive drawing in `react-native`.\r\n\r\nThis repository was originally forked from `@terrylinla/react-native-sketch-canvas`, which is no longer active.\r\nThe source code has been heavily refactored to boost performance.\r\n\r\nSome features have been added, some removed or changed, making it declarative, more light-weight and low-level, befitting `react-native-reanimated`.\r\n\r\nDue to these major changes a lot more can be done with this library, including integration with other libraries and components such as `react-native-svg`.\r\n\r\n**NOTICE:** `iOS` is not yet supported.\r\n\r\n\r\n## Why not `react-native-svg`?\r\n\r\nOne word.<br/>\r\n<br/>**RESPONSIVENESS**.<br/><br/>\r\n\r\nNone the less, `react-native-svg` can be used with this library.\r\n\r\n\r\n## Performance\r\n\r\n1. Transparent path needs to be checked\r\n1. All touches are now handled in native\r\n\r\n\r\n## Example\r\n\r\nCheck full example app in the [CanvasExample/App](https://github.com/ShaMan123/react-native-reanimated-canvas/tree/master/CanvasExample/App) folder.\r\n\r\n## Contributing\r\n\r\nFeel free to submit issues and PRs.\r\n","type":"md","dependencies":[]},{"filepath":"pages\\2.getting_started.md","title":"Getting Started","description":"","link":"getting-started","data":"# Installation\r\n\r\n---\r\n\r\nThis library operates on `react-native>=0.60`.\r\n\r\n```bash\r\nnpm install react-native-reanimated react-native-gesture-handler react-native-reanimated-canvas --save\r\n//  OR\r\nyarn add react-native-reanimated react-native-reanimated react-native-reanimated-canvas\r\n\r\n//  For iOS\r\ncd ios && pod install\r\n```\r\n\r\n## @next\r\n\r\nInstall the `next` build.\r\n\r\n```bash\r\nyarn add react-native-reanimated-canvas@next\r\n```\r\n\r\n## Usage\r\n\r\n```ts\r\nimport React, { Component } from 'react';\r\nimport RCanvas, { RCanvasProps, RPath } from 'react-native-reanimated-canvas';\r\n\r\nexport default function Canvas(props: RCanvasProps) {\r\n  return (\r\n    <RCanvas\r\n      style={{ flex: 1 }}\r\n      strokeColor='red'\r\n      strokeWidth={7}\r\n    >\r\n      <RPath\r\n        points={new Array(200).fill(0).map((v, i) => ({ x: i, y: i }))}\r\n        strokeWidth={20}\r\n        strokeColor='pink'\r\n      />\r\n    </RCanvas>\r\n  );\r\n}\r\n\r\n```","type":"md","dependencies":[]},{"filepath":"pages\\3.usage.md","title":"Properties, Methods and Types","description":"","link":"properties--methods-and-types","data":"# Properties, Methods and Types\r\n\r\n---\r\n\r\nTake a look at [src/types.ts](https://github.com/ShaMan123/react-native-reanimated-canvas/blob/master/src/types.ts).\r\n\r\n```ts\r\n\r\nimport * as React from 'react';\r\nimport { Insets, NativeSyntheticEvent, ViewProps } from \"react-native\";\r\nimport { PanGestureHandlerProperties } from 'react-native-gesture-handler';\r\nimport Animated from 'react-native-reanimated';\r\n\r\nexport enum Commands {\r\n  alloc = 1,\r\n  drawPoint,\r\n  endInteraction,\r\n  clear,\r\n  update,\r\n  setAttributes\r\n}\r\n\r\nexport enum Methods {\r\n  isPointOnPath = 'isPointOnPath',\r\n  save = 'save',\r\n  restore = 'restore',\r\n  getPaths = 'getPaths'\r\n}\r\n\r\nexport type Point = {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\nexport interface RPathDataBase {\r\n  strokeColor: string | number\r\n  strokeWidth: number\r\n  points?: Point[]\r\n}\r\n\r\nexport interface RPathData extends RPathDataBase {\r\n  id: string\r\n}\r\n\r\nexport type IntersectionResponse = string[];\r\n\r\nexport interface NativeStrokeEvent extends Point {\r\n  id: string,\r\n}\r\n\r\nexport interface NativeChangeEvent {\r\n  state: {\r\n    strokeColor: number,\r\n    strokeWidth: number\r\n  },\r\n  paths: { [id: string]: RPathData | null },\r\n  added: string[],\r\n  changed: string[],\r\n  removed: string[]\r\n}\r\n\r\nexport type NativeTouchEvent = IntersectionResponse & Point;\r\nexport type StrokeStartEvent = NativeSyntheticEvent<RPathData>;\r\nexport type StrokeEvent = NativeSyntheticEvent<NativeStrokeEvent>;\r\nexport type StrokeEndEvent = NativeSyntheticEvent<RPathData>;\r\nexport type ChangeEvent = NativeSyntheticEvent<NativeChangeEvent>\r\n\r\ninterface NativeTouchProps {\r\n  /** set to true to handle touches with the native driver */\r\n  useNativeDriver?: boolean\r\n  onStrokeStart?: (e: StrokeStartEvent) => void\r\n  onStrokeChange?: (e: StrokeEvent) => void\r\n  onStrokeEnd?: (e: StrokeEndEvent) => void\r\n  /** fires only if `useNativeDriver` is set to `true` */\r\n  onPress?: (e: NativeTouchEvent) => void\r\n  /** fires only if `useNativeDriver` is set to `true` */\r\n  onLongPress?: (e: NativeTouchEvent) => void\r\n}\r\n\r\ninterface ExtendedInsets extends Insets {\r\n  /**overrides left & right insets */\r\n  horizontal?: number,\r\n  /**overrides top & bottom insets */\r\n  vertical?: number\r\n}\r\n\r\ninterface RCanvasCommonProps {\r\n  strokeColor?: string | Animated.Adaptable<number>\r\n  strokeWidth?: Animated.Adaptable<number>\r\n\r\n  /**\r\n   * pass a rect or a number to apply all insets equally\r\n   * hitSlop is used for `isPointOnPath`\r\n   */\r\n  hitSlop?: ExtendedInsets | number\r\n\r\n  /**\r\n   * \r\n   * *************************************************************************\r\n   * Reanimated Canvas\r\n   * *************************************************************************\r\n   * Defaults to `false`, ensuresing all functionality works.\r\n   * Might take a toll on performance.\r\n   * If strange things are stirring set this prop to `false`.\r\n   */\r\n  renderToHardwareTextureAndroid?: boolean\r\n}\r\n\r\nexport interface RPathProps extends RCanvasCommonProps {\r\n  /**\r\n   * **********************\r\n   * Experimental\r\n   * **********************\r\n   * Use with `animate = true`\r\n   * Pass an animated node to animate path drawing\r\n   */\r\n  index?: Animated.Node<number>,\r\n  /**\r\n   * **********************\r\n   * Experimental\r\n   * **********************\r\n   * Use with `index`\r\n   */\r\n  animate?: boolean,\r\n\r\n  points: Point[]\r\n}\r\n\r\nexport interface RCanvasProps extends RCanvasCommonProps {\r\n  onChange?: (e: ChangeEvent) => void\r\n}\r\n\r\nexport type RPathProperties = ViewProps & RPathProps;\r\n\r\nexport type RCanvasProperties = React.PropsWithChildren<ViewProps & PanGestureHandlerProperties & RCanvasProps>;\r\n\r\nexport type RCanvasRef = {\r\n\r\n  /**\r\n   * allocate a new path\r\n   * use this method to customize touch handling or to mock drawing animations\r\n   * if customizing touch handling, be sure to pass `enabled = false` to avoid duplicate drawing/touches\r\n   * [startPath, addPoint, endPath]\r\n   * @param id when omitted a unique id is generated using `generatePathId()` and returned from the method\r\n   */\r\n  alloc(id?: string, strokeColor?: string | number, strokeWidth?: number): string\r\n  /**\r\n   * draw a point to the current/specified path\r\n   * use this method to customize touch handling or to mock drawing animations\r\n   * if customizing touch handling, be sure to pass `enabled = false` to avoid duplicate drawing/touches\r\n   * [startPath, addPoint, endPath]\r\n   * \r\n   * @param x\r\n   * @param y\r\n   * @param id the path's id\r\n   */\r\n  drawPoint(id: string, point: Point): void\r\n  /**\r\n   * end current interaction for path\r\n   * use this method to customize touch handling or to mock drawing animations\r\n   * if customizing touch handling, be sure to pass `enabled = false` to avoid duplicate drawing/touches\r\n   * Must call this method when interaction ends\r\n   * [startPath, addPoint, endPath]\r\n   * @param id \r\n   */\r\n  endInteraction(id: string): void\r\n\r\n  clear(): void\r\n\r\n  getPaths(): RPathData[]\r\n\r\n  getPath(id: string): RPathData | null\r\n\r\n  update(paths: { [id: string]: RPathDataBase | null }): void\r\n\r\n  setPathAttributes(id: string, attr: { width: number, color: string | number }): void\r\n\r\n  dispatchCommand(command: Commands, data?: any[]): void\r\n\r\n  /**\r\n * @param x Set it to `evt.nativeEvent.locationX`\r\n * @param y Set it to `evt.nativeEvent.locationY`\r\n * @param pathId Set to the pathId or undefined\r\n * @param callback If omitted the method returns a Promise\r\n */\r\n  isPointOnPath<T extends string>(\r\n    x: number,\r\n    y: number,\r\n    pathId: T,\r\n    onSuccess: (result: T extends (never | null) ? IntersectionResponse : boolean) => void,\r\n    onFailure: (error: Error) => void\r\n  ): void\r\n  isPointOnPath(x: number, y: number, pathId: number): Promise<boolean>\r\n  isPointOnPath(x: number, y: number): Promise<IntersectionResponse>\r\n\r\n  /**\r\n   * save paths' state\r\n   * @param onSuccess \r\n   * @param onFailure \r\n   */\r\n  save(): Promise<number>\r\n  save(\r\n    onSuccess?: (saveCount: number) => void,\r\n    onFailure?: (error: Error) => void\r\n  ): void\r\n\r\n  restore(saveCount?: number): Promise<void>\r\n\r\n  getNode(): RCanvasRef\r\n\r\n  handle(): number | null\r\n\r\n  setNativeProps(props: RCanvasProperties): void\r\n\r\n  /**\r\n   * return only the unassigned module\r\n   * use to assign to a ref\r\n   */\r\n  module(): RCanvasRef\r\n}\r\n\r\n```","type":"md","dependencies":[]},{"filepath":"pages\\4.migration_path.md","title":"Migration Path","description":"","link":"migration-path","data":"# Migration Path\r\n\r\n---\r\n\r\n## Custom Touch Handling\r\n\r\nIf you don't use [`react-native-gesture-handler`](https://software-mansion.github.io/react-native-gesture-handler/) or [`react-native-reanimated`](https://software-mansion.github.io/react-native-reanimated/) consider doing so.<br/>\r\nThese are excellent, performant libraries.<br/>\r\nNon the less, a basic implementation of this library is exposed for such a case.\r\n\r\nTake a look at [JSTouchHandling](https://github.com/ShaMan123/react-native-reanimated-canvas/blob/master/CanvasExample/App/JSTouchHandling.tsx).<br/>\r\nYou will have to set up touch handling yourself, you can use exposed hooks for common usage.\r\n\r\n```ts\r\nimport RCanvasBase, { useCanvasPanResponder, useCanvasGestureHandler } from 'react-native-reanimated-canvas/base';\r\n\r\n```","type":"md","dependencies":[]}
]